import pandas as pd
import numpy as np

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import Lasso
from sklearn import metrics
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv(r'C:\Users\hp\Downloads\CarPrice_Assignment.csv')
df
df.head()
df.tail()
df.info()

df.isna().sum()

df.describe(include='all')
print(df.fueltype.value_counts())
print(df.aspiration.value_counts())
print(df.doornumber.value_counts())
print(df.carbody.value_counts())
print(df.drivewheel.value_counts())
print(df.enginelocation.value_counts())
print(df.fuelsystem.value_counts())

plt.subplots(figsize=(40,30))
ax=sns.boxplot(x='CarName', y='price', data= df)
ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha='right')
plt.show()

plt.subplots(figsize=(15,7))
ax=sns.boxplot(x='fueltype', y='price', data=df)
ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha='right')
plt.show()

plt.subplots(figsize=(40,30))
ax=sns.boxplot(x='fuelsystem', y='price', data=df)
ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha='right')
plt.show()

plt.subplots(figsize=(15,10))
ax=sns.boxplot(x='aspiration', y='price', data=df)
ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha='right')
plt.show()

plt.subplots(figsize=(15,10))
ax=sns.boxplot(x='stroke', y='price', data=df)
ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha='right')
plt.show()

plt.subplots(figsize=(15,10))
ax=sns.boxplot(x='drivewheel', y='price', data=df)
ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha='right')
plt.show()

df = pd.get_dummies(df, columns = ['fueltype', 'aspiration', 'doornumber', 'carbody', 'drivewheel', 'cylindernumber', 'enginelocation', 'enginetype','fuelsystem'])
print(df)

df

x = df.drop(['CarName', 'price'], axis = 1)
y = df[['price']]

x
y

xtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.25, random_state = 50)
xtrain
ytrain
xtest
ytest

lin_model = LinearRegression()
lin_model.fit(xtrain, ytrain)

ypredtest = lin_model.predict(xtest)

Mean_absolute_error = mean_absolute_error(ytest, ypredtest)
print('Mean_absolute_error:',Mean_absolute_error)

Mean_squared_error = mean_squared_error(ytest, ypredtest)
print('Mean_squared_error:',Mean_squared_error)

Root_Mean_squared_error = np.sqrt(Mean_squared_error)
print('Root_Mean_squared_error:', Root_Mean_squared_error)

RSquared = r2_score(ytest, ypredtest)
print('R-Squared:' ,RSquared)

AdjRsquared = 1-((1-RSquared)*(len(xtest)-1)/(len(xtest)- len(x.columns)-1))
print('AdjRsquared:', AdjRsquared)

ypredtrain = lin_model.predict(xtrain)

Mean_absolute_error = mean_absolute_error(ytrain, ypredtrain)
print('Mean_absolute_error:',Mean_absolute_error)

Mean_squared_error = mean_squared_error(ytrain, ypredtrain)
print('Mean_squared_error:',Mean_squared_error)

Root_Mean_squared_error = np.sqrt(Mean_squared_error)
print('Root_Mean_squared_error:', Root_Mean_squared_error)

RSquared = r2_score(ytrain, ypredtrain)
print('R-Squared:' ,RSquared)

AdjRsquared = 1-((1-RSquared)*(len(xtest)-1)/(len(xtest)- len(x.columns)-1))
print('AdjRsquared:', AdjRsquared)

x.columns
ypredtest
ytest
ytest - ypredtest
